plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.3'
    id 'io.spring.dependency-management' version '1.1.0'
    id "maven-publish"
    id 'jacoco'
    id "com.github.spotbugs" version "5.0.14"
    id "io.freefair.lombok" version "8.0.1"
    id "checkstyle"
    id "pmd"
}

group = 'com.audition'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'

apply from: 'config/code-analysis.gradle'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2022.0.1")
    set('logbackVersion', "1.4.5")
    set('slf4jVersion', "2.0.5")
    set('springdocVersion', "2.0.2")
}

dependencies {
    // Spring Boot Starters
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-aop"

    // Spring Cloud
    implementation "org.springframework.cloud:spring-cloud-starter-config"
    implementation "org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j"

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    // Logging
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"

    // Spring Boot Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Development Only
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    // OpenTelemetry
    implementation 'io.opentelemetry:opentelemetry-api:1.30.1'
    implementation 'io.opentelemetry:opentelemetry-sdk:1.30.1'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.30.1'

    // SpringDoc OpenAPI
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

checkstyle {
    toolVersion = '10.3.1' // Specify the Checkstyle version
    configFile = file('config/checkstyle/checkstyle.xml') // Path to the Checkstyle configuration file
}

tasks.withType(Checkstyle) {
    reports {
        xml.required.set(false)
        html.required.set(true)
    }
}

task prepareGitHooks(type: Copy) {
    from "$projectDir/git-hooks"
    into "$projectDir/.git/hooks"
    include "*"
}
tasks.matching { it.name != 'prepareGitHooks' }.all { Task task -> task.dependsOn prepareGitHooks }

tasks.named('test') {
    useJUnitPlatform()
}